#!/usr/bin/python3

import argparse
import requests
import json
import pprint
import subprocess
import re

url = "https://cve.circl.lu/api/last"
pp = pprint.PrettyPrinter()

def scanPkgs(args):
    
    # Fetch all packages installed on this system
    print("Building Package Index...")
    pkgs = subprocess.check_output(["dpkg-query", "-W", "-f=${Package}:${Version}\n"]).decode('utf-8').strip().split('\n')
    search_terms = []
    
    if not args.id:
        print("Fetching latest vulnerabilities...")
        vulns = requests.get("https://cve.circl.lu/api/last")
    
    else:
        print("Fetching Vulneratility: %s" % args.id)
        vulns = requests.get("https://cve.circl.lu/api/cve/%s"%(args.id))

    CVE_LIST = json.loads(vulns.content.decode('utf-8'))
    FOUND = []

    if isinstance(CVE_LIST, list):
        for CVE in CVE_LIST:
            print("Checking %s..."%CVE["id"])
            for vuln in CVE["vulnerable_configuration"]:
                if vuln in pkgs:
                    print("DETECTED!")

    elif isinstance(CVE_LIST, dict):
        print("Checking %s..."%CVE_LIST["id"])
        for vuln in CVE_LIST["vulnerable_product"]:
            v = vuln.split(":")
            pkg = re.compile(v[4] + "*")
            apkgs = list(filter(pkg.match, pkgs))
            if len(apkgs) > 0:
                ver = re.compile(v[5] + "*")
                results = list(filter(ver.match, apkgs))
                print(results)
                if len(results) > 0:
                    FOUND.append({"CVE": CVE_LIST["id"], "FOUND": results })
        pp.pprint(FOUND)
#            if vstr in pkgs:
#                print("DETECTED!")



if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Scan system for CVE affected Packages")
    parser.add_argument('-v', '--verbose', action="store_true", help="Verbose")
    parser.add_argument('--id', help="Evaluate for a specific CVE")
    args = parser.parse_args()
    scanPkgs(args)
