#!/usr/bin/python3

import argparse
import requests
import json
import pprint
import subprocess
import re

url = "https://cve.circl.lu/api/last"
pp = pprint.PrettyPrinter()
result = {}

def genPkgIndex():
    # Fetch all packages installed on this system
    print("Building Package Index...")
    return subprocess.check_output(["dpkg-query", "-W", "-f=${Package}:${Version}\n"]).decode('utf-8').strip().split('\n')

def scanCVE(index, vuln):
    print("Scanning for %s" % (vuln["id"]))
    affected_packages = []
    for package in vuln["vulnerable_product"]:
        p = package.split(":")
        pkg = re.compile(p[4] + "*")
        r = list(filter(pkg.match, index))
        if len(r) > 0:
            for item in r:
                affected_packages.append(item)
    if len(affected_packages) > 0:
        result[vuln["id"]] = {"status": "OFUCKOSHIT", "packages": affected_packages}
    else:
        result[vuln["id"]] = {"status": "Passed"}

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Scan system for CVE affected Packages")
    parser.add_argument('-v', '--verbose', action="store_true", help="Verbose")
    parser.add_argument('--id', help="Evaluate for a specific CVE")
    parser.add_argument('--show', action='store_true', help="Show CVE Details")
    args = parser.parse_args()
    
    index = genPkgIndex()
    results = {}

    if not args.id:
        print("Fetching latest vulnerabilities...")
        vulns = json.loads(requests.get("https://cve.circl.lu/api/last").content.decode('utf-8'))
        for vuln in vulns:
            if args.show:
                pp.ppprint(vuln)
            else:
                scanCVE(index, vuln)
    else:
        print("Fetching Vulneratility: %s" % args.id)
        vuln = json.loads(requests.get("https://cve.circl.lu/api/cve/%s"%(args.id)).content.decode('utf-8'))
        if args.show:
            pp.pprint(vuln)
        else:
            scanCVE(index, vuln)

    pp.pprint(result)
