#!/usr/bin/python3

import argparse
import datetime
import gzip
import os
import pprint
import re
import shutil
import subprocess
import sys
import tabulate
import pprint

# SCRIPT CONFIGURABLES
# Output table format
TABLEFORMAT = "github"

# Define DPKG log location
DPKG_LOGDIR = "/var/log"
APT_LOGDIR = "/var/log/apt"

# Default package handler for undo-ing / redo-ing transactions
PACKAGE_HANDLER = "apt"

# Maximum duration in seconds between two lines of record and still being in the same job.
TIME_SENSITIVITY = 45

# Debugging tool 
PP = pprint.PrettyPrinter(indent=4)

# Some basic lingual definitions for logfile parsing
APT_ACTIONS = ["install", "remove", "upgrade"]
JANKY_KEYS = ["start-date", "end-date", "requested-by"]

class History:
    def __init__(self):
        # Build a jobs object based on apts history.log
        self.jobs = {}
        statuses = {}
        job_id = 0
        apt_data = self._find_sources(APT_LOGDIR, "history.log")
        for item in apt_data:
            item = item.decode('utf8').rstrip('\n')
            if item == "":
                job_id+=1
                self.jobs[job_id] = {}
                self.jobs[job_id]["actions"] = {}
                continue
            elif item.split(":")[0].lower() in JANKY_KEYS:
                self.jobs[job_id][item.split(":")[0].lower().replace("-","_")] = item.replace(item.split(":")[0] + ": ",'').replace("  ", " ")
            elif item.split(":")[0].lower() in APT_ACTIONS:
                if item.split(":")[0].lower() not in self.jobs[job_id]["actions"].keys():
                    self.jobs[job_id]["actions"][item.split(":")[0].lower()] = item.replace(item.split(":")[0] + ": ", '')
            else:
                self.jobs[job_id][item.split(":")[0].lower()] = item.replace(item.split(":")[0] + ": ",'')
    def _find_sources(self, location, fname):
        sources = []
        [ sources.append(logfile) if fname in logfile else "" for logfile in os.listdir(location) ]
        sources.sort(reverse=True)
        raw = []
        for source in sources:
            if source.split(".")[-1] == "gz":
                with gzip.open(os.path.join(location, source), "rb") as f:
                    [ raw.append(line) for line in f.readlines() ]
            else:
                with open(os.path.join(location, source), "rb") as f:
                    [ raw.append(line) for line in f.readlines() ]
        return(raw)

    def _print_table(self, table):
        # Use tabulate to fancy format output
        headers = table[0]
        table.pop(0)
        print(tabulate.tabulate(table, headers, tablefmt=TABLEFORMAT))

    def listJobs(self, show_only):
        if show_only != "all":
            no_older = datetime.datetime.now() - datetime.timedelta(days = int(show_only))

        output = [["Job ID", "User", "Date", "Actions" ]]
        for job_id in self.jobs.keys():
            job = self.jobs[job_id]
            if "requested_by" not in job.keys():
                job["requested_by"] = "system"
            row = [
                job_id,
                job["requested_by"],
                job["start_date"],
                ", ".join(job["actions"].keys()),
            ]
            
            # List size logic for show_last / show_all
            if show_only != "all" and datetime.datetime.fromisoformat(self.jobs[job_id]["start_date"]) > no_older:
                output.append(row)
            elif show_only == "all":
                output.append(row)
        self._print_table(output)


    def showJob(self, job_id):
        PP.pprint(self.jobs[int(job_id)])


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--debug", action="store_true", help="debug switch")
    show = parser.add_mutually_exclusive_group()
    show.add_argument("--show-last", help="Show last <num> days of transactions")
    show.add_argument("--show-all", action="store_true", help="Show last <num> days of transactions")
    action = parser.add_mutually_exclusive_group()
    action.add_argument("--list", action="store_true", help="Show dpkg transactions")
    action.add_argument("--info", help="Show transaction report by ID")
    action.add_argument("--inspect", help="Show detailed transaction data")
    action.add_argument("--redo", help="Redo transaction by ID")
    action.add_argument("--undo", help="Undo transaction by ID")
    action.add_argument(
        "--find", help="search for transactions including the provided string"
    )
    args = parser.parse_args()

    history = History()

    if args.list:
        show_only = 30
        if args.show_last:
            show_only = args.show_last
        if args.show_all:
            show_only = "all"
        history.listJobs(show_only)

    if args.info:
        history.showJob(args.info)

    if args.inspect:
        history.inspect(args.inspect)

    if args.redo:
        history.redoJob(args.redo)

    if args.undo:
        history.undoJob(args.undo)

    if args.debug:
        print(args)

if __name__ == "__main__":
    main()
