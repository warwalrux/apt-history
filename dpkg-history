#!/usr/bin/env python3

import argparse
import json
import os
import pprint
import re
import sys
import tabulate
import pprint
import yaml


tableformat="github"

DPKG_LOGFILE = "/var/log/dpkg.log"
ACTIONS = ["install", "remove", "upgrade", "configure" ]
STATUSES = [ "not-installed", "config-files", "half-installed", "unpacked", "half-configured", "triggers-awaited", "triggers-pending", "installed" ]
PP = pprint.PrettyPrinter(indent=4)

class History():
    def __init__(self):
        self.jobs = {}
        job_id = 1
        if os.path.isfile(DPKG_LOGFILE):
            history = {}
            with open(DPKG_LOGFILE, 'rb') as f:
                data = f.readlines()
            f.close()
            for record in data:
                record = record.decode('utf8').rstrip().split()
                
                # Ignore the seconds field in the time string
                record[1] = ':'.join([record[1].split(':')[0], record[1].split(':')[1]])
                if record[0] not in history.keys():
                    history[record[0]] = {}
                if record[1] not in history[record[0]].keys():
                    history[record[0]][record[1]] = []
                history[record[0]][record[1]].append(record[2:])

        for date in history.keys():
            for time in history[date].keys():
                self.jobs[job_id] = {}
                self.jobs[job_id]['date'] = date
                self.jobs[job_id]['time'] = time
                self.jobs[job_id]['data'] = []
                [[ self.jobs[job_id]['data'].append(line) for line in history[date][time] ]]
                job_id += 1
        
    def _print_table(self, table):
        headers = table[0]
        table.pop(0)
        print(tabulate.tabulate(table, headers, tablefmt=tableformat))


    def printJobs(self):
        output = [[ "Job ID", "Date", "Action", "Packages Affected" ]]
        for job in self.jobs:
            affected = []
            t = [ job, self.jobs[job]['date'], []]
            for line in self.jobs[job]['data']:
                if line[0] in ACTIONS and line[0] not in t[2]:
                    t[2].append(line[0])
                    if line[1] not in affected:
                        affected.append(line[1])
            t.append(len(affected))
            t[2] = ", ".join(t[2])
            output.append(t)
        self._print_table(output)

    def parseJobReport(self, job_id):
        info = self.jobs[int(job_id)]
        packages = []
        output = {}
        output['Job Id'] = job_id
        output['Date'] = info['date'] + " " + info['time']

        # Added headers for output table
        output['Status'] = [["Package Name", "Version", "Status"]]
        statuses = {}
        for line in info['data']:
            if line[0] == "upgrade":
                if "upgraded" not in output.keys():
                    output['upgraded'] = [["Package Name", "Old Version", "New Version"]]
                output['upgraded'].append(line[1:4])
            if line[0] == "remove":
                if "removed" not in output.keys():
                    output['removed'] = [["Package Name", "Version"]]
                output['removed'].append(line[1:3])
            if line[0] == "configure":
                if "configured" not in output.keys():
                    output['configured'] = []
                output['configured'].append(line[1])
            if line[0] == "install":
                if "installed" not in output.keys():
                    output['installed'] = [["Package Name", "Version"]]
                output['installed'].append([line[1], line[3]])
            if line[0] == "status":
                statuses[line[2].split(':')[0]] = {}
                statuses[line[2].split(':')[0]]['Version'] = line[3]
                statuses[line[2].split(':')[0]]['Status'] = line[1]
        [[ output['Status'].append([key, statuses[key]['Version'], statuses[key]['Status']]) for key in statuses ]]

        # For inspection
        output['raw'] = info
        return(output)

def main():
    history = History()
    parser = argparse.ArgumentParser()
    parser.add_argument('--debug', action="store_true", help="debug switch")
    action = parser.add_mutually_exclusive_group()
    action.add_argument('--list', action="store_true", help="Show dpkg transactions")
    action.add_argument('--info', help="Show transaction report by ID")
    action.add_argument('--inspect', help="Show detailed transaction data")
    action.add_argument('--redo', help="Redo transaction by ID")
    action.add_argument('--undo', help="Undo transaction by ID")
    args = parser.parse_args()
    if args.list:
        history.printJobs()
    if args.info:
        output = history.parseJobReport(args.info)
        del output['raw']
        #del output['status']
        print("Job ID: " + output['Job Id'])
        print("Date and Time: " + output['Date'])
        del output['Date']
        del output['Job Id']

        for key in output.keys():
            print("\n"+key.capitalize()+":\n")
            if key != "configured":
                history._print_table(output[key])
            elif key == "configured":
               [[ print("  - " + line) for line in output[key] ]] 
        #print(yaml.dump(output, default_flow_style=False))

    if args.inspect:
        output = history.parseJobReport(args.inspect)
        print("Job ID: " + output['Job Id'])
        print("Date: " + output['Date'])
        [[ print(output['Date'], line) for line in output['raw']['data'] ]]

if __name__ == "__main__":
    main()
