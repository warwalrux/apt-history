#!/usr/bin/python3

import argparse
import datetime
import gzip
import jinja2
import os
import pprint
import re
import shutil
import subprocess
import sys
import tabulate
import pprint

# SCRIPT CONFIGURABLES
# Output table format
TABLEFORMAT = "github"

# Define apt log location
DPKG_LOGDIR = "/var/log"
APT_LOGDIR = "/var/log/apt"

# Default package handler for undo-ing / redo-ing transactions
PACKAGE_HANDLER = "apt"

# Maximum duration in seconds between two lines of record and still being in the same job.
TIME_SENSITIVITY = 45

# Debugging tool 
PP = pprint.PrettyPrinter(indent=4)

# Some basic lingual definitions for logfile parsing
APT_ACTIONS = ["Install", "Remove", "Upgrade", "Purge"]
JANKY_KEYS = ["Start-Date", "End-Date", "Requested-By"]

class History:
    def __init__(self):
        # Build a jobs object based on apts history.log
        self.jobs = {}
        statuses = {}
        job_id = 0
        apt_data = self._find_sources(APT_LOGDIR, "history.log")
        for item in apt_data:
            item = item.decode('utf8').rstrip('\n')
            if item == "":
                job_id+=1
                self.jobs[job_id] = {}
                self.jobs[job_id]["actions"] = {}
                continue
            cur_key = item.split(":")[0]
            # Extra stupid space in date strings prevents datetime.datetime.fromisoformat() from working
            if cur_key in JANKY_KEYS and "Date" in cur_key:
                self.jobs[job_id][cur_key.lower().replace("-","_")] = item.replace(cur_key + ": ",'').replace("  ", " ")
            elif cur_key in JANKY_KEYS:
                self.jobs[job_id][cur_key.lower().replace("-","_")] = item.replace(cur_key + ": ",'')
            elif cur_key in APT_ACTIONS:
                if cur_key.lower() not in self.jobs[job_id]["actions"].keys():
                    affected = item.replace(cur_key + ": ", '').replace("(", ",").split("),")
                    self.jobs[job_id]["actions"][cur_key.lower()] = [ package.replace(")","").split(",") for package in affected]
            else:
                self.jobs[job_id][cur_key.lower()] = item.replace(cur_key + ": ",'')


    def _find_sources(self, location, fname):
        sources = []
        [ sources.append(logfile) if fname in logfile else "" for logfile in os.listdir(location) ]
        sources.sort(reverse=True)
        raw = []
        for source in sources:
            if source.split(".")[-1] == "gz":
                with gzip.open(os.path.join(location, source), "rb") as f:
                    [ raw.append(line) for line in f.readlines() ]
            else:
                with open(os.path.join(location, source), "rb") as f:
                    [ raw.append(line) for line in f.readlines() ]
        return(raw)

    def _print_table(self, table, fmt=TABLEFORMAT):
        # Use tabulate to fancy format output
        headers = table[0]
        table.pop(0)
        print(tabulate.tabulate(table, headers, tablefmt=fmt))

    def findPackage(self, package):
        rows = [["Job ID","Date" "Action", "Package", "Version" ]]
        for job in self.jobs:
            for action in self.jobs[job]["actions"].keys():
                for pkg in self.jobs[job]["actions"][action]:
                    if package.search(" ".join(pkg)):
                        if action == "upgrade":
                            rows.append([ job, self.jobs[job]['start_date'], action, pkg[0], " -> ".join(pkg[1:3])])
                        else:
                            rows.append([ job, self.jobs[job]['start_date'], action, pkg[0], pkg[1]])
                        break
        self._print_table(rows)

    def listJobs(self, show_only):
        if show_only != "all":
            no_older = datetime.datetime.now() - datetime.timedelta(days = int(show_only))
        output = [["Job ID", "User", "Date", "Actions", "Altered" ]]
        for job_id in self.jobs.keys():
            job = self.jobs[job_id]
            altered = [len(job["actions"][action]) for action in job["actions"].keys()]
            if "requested_by" not in job.keys():
                job["requested_by"] = "system"
            row = [
                job_id,
                job["requested_by"],
                job["start_date"],
                ", ".join(job["actions"].keys()),
                sum(altered)
                
            ]
            # List size logic for show_last / show_all
            if show_only != "all" and datetime.datetime.fromisoformat(self.jobs[job_id]["start_date"]) > no_older:
                output.append(row)
            elif show_only == "all":
                output.append(row)
        self._print_table(output)


    def showJob(self, job_id):
        job = self.jobs[int(job_id)]
        if "requested_by" not in job.keys():
            job["requested_by"] = "system"
        string = """Job Id:\t\t{{ job_id }}
Start Date:\t{{ start_date }}
End Date:\t{{ end_date }}
User:\t\t{{ user }}
Invocation:\t{{ invocation }}
"""
        j = jinja2.Template(string)
        print(j.render(job_id=job_id,start_date=job["start_date"],end_date=job["end_date"],user=job["requested_by"],invocation=job["commandline"]))
        for action in job["actions"].keys():
            print("%s:\n"%action.capitalize())
            packages = [ pkg[0] for pkg in job["actions"][action] ]
            if len(packages) >= 30:
                packages = [ packages[x:x+5] for x in range(0, len(packages), 5) ]
                self._print_table(packages, "plain")
            elif len(packages) <=29 and len(packages) >= 7:
                packages = [ packages[x:x+3] for x in range(0, len(packages), 3) ]
                self._print_table(packages, "plain")
            else:
                for package in packages:
                    print(package)

class PackageManager:
    def __init__(self):
        self.aptcmd = [ shutil.which("apt") ]
        self.dpkgcmd = [ shutil.which("dpkg") ]

        # boilerplate logic to fold a dict into a list of bash appropriate arguments to supply to self.command.
    def apt(self, data):
        """ apt handler function
        EXAMPLE:
            self.apt(['install', 'sl', '-y']
                is equivalent to 
            ~# apt install sl -y
        
        Requires:
            a list of arguments to follow $(which apt)
        """

        runcmd = self.aptcmd
        runcmd.extend(data)
        s = subprocess.Popen(
            runcmd, stdout=subprocess.PIPE
        )

    def dpkg(self, conf):
        """ dpkg handler function

        EXAMPLE:
            self.dpkg({'configure': True, 'pending': True})
                is equivalent to
            ~# dpkg --configure --pending

            self.dpkg({'install': "~/Downloads/Minecraft.deb"})
                is equivalent to
            ~# dpkg --install ~/Downloads/Minecraft.deb

         Requires:
            A dict whose keys are arguments that represent their
            value or presence. Keys set to True will be presented
            as `--key`. 
         """
         
        run_args_list = [
            ["--" + key, conf[key]]
            for key in conf.keys()
                if key not in self.unacceptable_tags
                and conf[key] is not None
                and conf[key] is not True
                and conf[key] is not False
            ]
        run_args_flags = [
            ["--" + key, conf[key]]
            for key in conf.keys()
                if key not in self.unacceptable_tags and conf[key] is True
            ]

        run_args = [arg for args_pair in run_args_list for arg in args_pair]
        run_flags = [arg[0] for arg in run_args_flags]

        # construct the command string
        runcmd = self.dpkgcmd
        runcmd.extend(run_args)
        runcmd.extend(run_flags)

        s = subprocess.Popen(runcmd, stdout=subprocess.PIPE)
        print(s.communicate()[0].decode("utf8"))

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--debug", action="store_true", help="debug switch")
    show = parser.add_mutually_exclusive_group()
    show.add_argument("--show-last", help="Show last <num> days of transactions")
    show.add_argument("--show-all", action="store_true", help="Show last <num> days of transactions")
    action = parser.add_mutually_exclusive_group()
    action.add_argument("--list", action="store_true", help="Show dpkg transactions")
    action.add_argument("--info", help="Show transaction report by ID")
    action.add_argument("--redo", help="Redo transaction by ID")
    action.add_argument("--undo", help="Undo transaction by ID")
    action.add_argument(
        "--find", help="search for transactions including the provided string"
    )
    args = parser.parse_args()

    history = History()

    if args.list:
        show_only = 30
        if args.show_last:
            show_only = args.show_last
        if args.show_all:
            show_only = "all"
        history.listJobs(show_only)

    if args.info:
        history.showJob(args.info)
    
    if args.find:
        term = re.compile(r"%s"%args.find, re.IGNORECASE | re.MULTILINE)
        history.findPackage(term)

    if args.redo:
        history.redoJob(args.redo)

    if args.undo:
        history.undoJob(args.undo)

    if args.debug:
        print(args)

if __name__ == "__main__":
    main()
